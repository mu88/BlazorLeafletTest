@using Microsoft.Extensions.Logging
@inject ILogger<LifePointDetail> Logger
@inject IJSRuntime JsRuntime

<h1>@Id</h1>

@code {

    private IJSObjectReference _lifePointDetailModule = null!; // is initialized on component construction

    [Parameter]
    public string Id { get; set; } = null!;

    private Task LogAsync(string message)
    {
        Logger.LogInformation(message);
        return Task.CompletedTask;
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await LogAsync($"{nameof(LifePointDetail)}-{nameof(OnInitializedAsync)}");
        await LoadLifePointDetailModuleAsync();
        await base.OnInitializedAsync();
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LogAsync($"{nameof(LifePointDetail)}-{nameof(OnAfterRenderAsync)}");
        await base.OnAfterRenderAsync(firstRender);
        await UpdatePopupAsync();
    }

    private async Task LoadLifePointDetailModuleAsync() => _lifePointDetailModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/LifePointDetail.razor.js");

    private async Task UpdatePopupAsync()
    {
        if (_lifePointDetailModule == null)
        {
            await LogAsync($"{nameof(_lifePointDetailModule)} is null although this should not happen");
            return;
        }
        await _lifePointDetailModule.InvokeVoidAsync("updatePopup", Id);
    }

}